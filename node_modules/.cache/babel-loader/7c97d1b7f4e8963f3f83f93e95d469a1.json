{"ast":null,"code":"var _jsxFileName = \"/Users/samiksharana/Downloads/book-movie-app/src/screens/home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from \"react\";\nimport Header from \"../../common/header/Header\";\nimport \"./Home.css\";\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useStyles = theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper\n  },\n  gridListUpMov: {\n    flexWrap: 'nowrap',\n    transform: 'translateZ(0)',\n    width: '100%'\n  },\n  title: {\n    color: theme.palette.primary.light\n  },\n  titleBar: {\n    background: 'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)'\n  },\n  gridListLeftContainer: {\n    transform: 'translateZ(0)',\n    cursor: 'pointer'\n  },\n  movieFilterCardForm: {\n    margin: theme.spacing.unit,\n    minWidth: 240,\n    maxWidth: 240\n  }\n});\n\nconst Home = props => {\n  _s();\n\n  const {\n    classes\n  } = props;\n  const [movies, setUpcomingMoviesList] = useState([]);\n  const [relMovies, setReleasedMoviesList] = useState([]);\n  const [genresPicklist, setGenresPicklist] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [artistsPicklist, setArtistsPicklist] = useState([]);\n  const [selectedArtists, setSelectedArtists] = useState([]);\n  let dataUpcomingMovies = null;\n  let dataReleasedMovies = null;\n  let dataGenresPicklist = null;\n  let dataArtistsPicklist = null;\n  let dataFilterBox = null;\n\n  const inputMovieNameHandler = event => {\n    setMovieName(event.target.value);\n  };\n\n  const selectGenresHandler = event => {\n    setSelectedGenres(event.target.value);\n  };\n\n  const selectArtistsHandler = event => {\n    setSelectedArtists(event.target.value);\n  };\n\n  const startDateHandler = event => {\n    setReleaseDateStart(event.target.value);\n  };\n\n  const endDateHandler = event => {\n    setReleaseDateEnd(event.target.value);\n  };\n\n  const movieClickHandler = movieId => {\n    props.history.push('/movie/' + movieId);\n  };\n\n  function loadMoviesData() {\n    //upcoming movies get request \n    fetch(props.baseURL + \"movies?status=PUBLISHED\", {\n      method: \"GET\",\n      headers: {\n        \"Cache-Control\": \"no-cache\",\n        'Accept': 'application/json'\n      },\n      body: dataUpcomingMovies\n    }).then(response => response.json()).then(response => {\n      setUpcomingMoviesList(response.movies);\n    }); //released movies get request\n\n    fetch(props.baseURL + \"movies?status=RELEASED\", {\n      method: \"GET\",\n      headers: {\n        \"Cache-Control\": \"no-cache\",\n        'Accept': 'application/json'\n      },\n      body: dataReleasedMovies\n    }).then(response => response.json()).then(response => {\n      setReleasedMoviesList(response.movies);\n    });\n  }\n\n  function loadGenres() {\n    fetch(props.baseURL + \"genres\", {\n      method: \"GET\",\n      headers: {\n        'Cache-Control': \"no-cache\",\n        'Accept': 'application/json'\n      },\n      body: dataGenresPicklist\n    }).then(response => response.json()).then(response => {\n      setGenresPicklist(response.genres);\n    });\n  }\n\n  function loadArtists() {\n    fetch(props.baseURL + \"artists\", {\n      method: \"GET\",\n      headers: {\n        \"Cache-Control\": \"no-cache\",\n        'Accept': 'application/json'\n      },\n      body: dataArtistsPicklist\n    }).then(response => response.json()).then(response => {\n      setArtistsPicklist(response.artists);\n    });\n  }\n\n  useLayoutEffect(() => {\n    loadMoviesData();\n    loadGenres();\n    loadArtists(); //console.log(movies)\n  }, []);\n\n  function loadFilters(query) {\n    fetch(props.baseURL + \"movies\" + encodeURI(query), {\n      method: \"GET\",\n      headers: {\n        \"Cache-Control\": \"no-cache\"\n      },\n      body: dataFilterBox\n    }).then(response => response.json()).then(response => {\n      setReleasedMoviesList(response.movies);\n    });\n  }\n\n  const applyFilterButtonHandler = () => {\n    let query = \"?status=RELEASED\";\n\n    if (movieName !== \"\") {\n      query += \"&title=\" + movieName;\n    }\n\n    if (selectedGenres.length > 0) {\n      query += \"&genres=\" + selectedGenres.toString();\n    }\n\n    if (selectedArtists.length > 0) {\n      query += \"&artists=\" + selectedArtists.toString();\n    }\n\n    if (relStartDate !== \"\") {\n      query += \"&start_date=\" + relStartDate;\n    }\n\n    if (relEndDate !== \"\") {\n      query += \"&end_date=\" + relEndDate;\n    }\n\n    loadFilters(query);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upMovHeader\",\n      children: \"Upcoming Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GridList, {\n      className: classes.gridListUpMov,\n      cols: 6,\n      cellHeight: 250,\n      children: movies.map(mov => /*#__PURE__*/_jsxDEV(GridListTile, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: mov.poster_url,\n          alt: mov.title,\n          className: \"mov-poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n          title: mov.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, mov.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-container\",\n        children: /*#__PURE__*/_jsxDEV(GridList, {\n          cellHeight: 350,\n          cols: 4,\n          className: classes.gridListLeftContainer,\n          children: relMovies.map(mov => /*#__PURE__*/_jsxDEV(GridListTile, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: mov.poster_url,\n              className: \"mov-poster\",\n              alt: mov.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n              title: mov.title,\n              subtitle: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Release Date: \", new Date(mov.release_date).toDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 33\n            }, this)]\n          }, mov.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-container\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.movieFilterCardForm,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.title,\n                color: \"textSecondary\",\n                children: \"FIND MOVIES BY:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.movieFilterCardForm,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"movieName\",\n                children: \"Movie Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"movieName\",\n                onChange: inputMovieNameHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.movieFilterCardForm,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"genres-Picklist\",\n                children: \"Genres\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                multiple: true,\n                input: /*#__PURE__*/_jsxDEV(Input, {\n                  id: \"genres-Picklist\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 44\n                }, this),\n                renderValue: selected => selected.join(\",\"),\n                value: selectedGenres,\n                onChange: selectGenresHandler,\n                children: genresPicklist.map(genre => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: genre.genre,\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: selectedGenres.indexOf(genre.genre) > -1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: genre.genre\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 243,\n                    columnNumber: 45\n                  }, this)]\n                }, genre.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.movieFilterCardForm,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"selectArtists\",\n                children: \"Artists\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                multiple: true,\n                input: /*#__PURE__*/_jsxDEV(Input, {\n                  id: \"selectArtists\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 57\n                }, this),\n                renderValue: selected => selected.join(','),\n                value: selectedArtists,\n                onChange: selectArtistsHandler,\n                children: artistsPicklist.map(artist => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: artist.first_name + \" \" + artist.last_name,\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: selectedArtists.indexOf(artist.first_name + \" \" + artist.last_name) > -1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 257,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: artist.first_name + \" \" + artist.last_name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 45\n                  }, this)]\n                }, artist.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.movieFilterCardForm,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"relStartDate\",\n                label: \"Release Date Start\",\n                type: \"date\",\n                defaultValue: \"\",\n                InputLabelProps: {\n                  shrink: true\n                },\n                onChange: startDateHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.movieFilterCardForm,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"relEndDate\",\n                label: \"Release Date End\",\n                type: \"date\",\n                defaultValue: \"\",\n                InputLabelProps: {\n                  shrink: true\n                },\n                onChange: endDateHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: classes.movieFilterCardForm,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => applyFilterButtonHandler(),\n                variant: \"contained\",\n                color: \"primary\",\n                children: \"APPLY\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"WWsyVl3962PD5WJizQfweecB3vI=\");\n\n_c = Home;\nexport default withStyles(useStyles)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/samiksharana/Downloads/book-movie-app/src/screens/home/Home.js"],"names":["React","useLayoutEffect","useState","Header","GridList","GridListTile","GridListTileBar","withStyles","Card","CardContent","FormControl","Typography","InputLabel","Input","Select","MenuItem","Checkbox","ListItemText","TextField","Button","useStyles","theme","root","backgroundColor","palette","background","paper","gridListUpMov","flexWrap","transform","width","title","color","primary","light","titleBar","gridListLeftContainer","cursor","movieFilterCardForm","margin","spacing","unit","minWidth","maxWidth","Home","props","classes","movies","setUpcomingMoviesList","relMovies","setReleasedMoviesList","genresPicklist","setGenresPicklist","selectedGenres","setSelectedGenres","artistsPicklist","setArtistsPicklist","selectedArtists","setSelectedArtists","dataUpcomingMovies","dataReleasedMovies","dataGenresPicklist","dataArtistsPicklist","dataFilterBox","inputMovieNameHandler","event","setMovieName","target","value","selectGenresHandler","selectArtistsHandler","startDateHandler","setReleaseDateStart","endDateHandler","setReleaseDateEnd","movieClickHandler","movieId","history","push","loadMoviesData","fetch","baseURL","method","headers","body","then","response","json","loadGenres","genres","loadArtists","artists","loadFilters","query","encodeURI","applyFilterButtonHandler","movieName","length","toString","relStartDate","relEndDate","map","mov","poster_url","id","Date","release_date","toDateString","selected","join","genre","indexOf","artist","first_name","last_name","shrink"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,eAAhB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAO,YAAP;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;;AAGA,MAAMC,SAAS,GAAGC,KAAK,KAAK;AACxBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,eAAe,EAAEF,KAAK,CAACG,OAAN,CAAcC,UAAd,CAAyBC;AADtC,GADkB;AAIxBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,QAAQ,EAAE,QADG;AAEbC,IAAAA,SAAS,EAAE,eAFE;AAGbC,IAAAA,KAAK,EAAC;AAHO,GAJS;AASxBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAEX,KAAK,CAACG,OAAN,CAAcS,OAAd,CAAsBC;AADxB,GATiB;AAYxBC,EAAAA,QAAQ,EAAE;AACRV,IAAAA,UAAU,EACR;AAFM,GAZc;AAgBxBW,EAAAA,qBAAqB,EAAE;AACnBP,IAAAA,SAAS,EAAE,eADQ;AAEnBQ,IAAAA,MAAM,EAAE;AAFW,GAhBC;AAoBxBC,EAAAA,mBAAmB,EAAE;AACjBC,IAAAA,MAAM,EAAElB,KAAK,CAACmB,OAAN,CAAcC,IADL;AAEjBC,IAAAA,QAAQ,EAAE,GAFO;AAGjBC,IAAAA,QAAQ,EAAE;AAHO;AApBG,CAAL,CAAvB;;AA2BA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACpB,QAAM;AAACC,IAAAA;AAAD,MAAYD,KAAlB;AACA,QAAM,CAACE,MAAD,EAAQC,qBAAR,IAAiC9C,QAAQ,CAAC,EAAD,CAA/C;AACA,QAAM,CAAC+C,SAAD,EAAYC,qBAAZ,IAAqChD,QAAQ,CAAC,EAAD,CAAnD;AACA,QAAM,CAACiD,cAAD,EAAiBC,iBAAjB,IAAsClD,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACmD,cAAD,EAAiBC,iBAAjB,IAAsCpD,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACqD,eAAD,EAAkBC,kBAAlB,IAAwCtD,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACuD,eAAD,EAAkBC,kBAAlB,IAAwCxD,QAAQ,CAAC,EAAD,CAAtD;AAEA,MAAIyD,kBAAkB,GAAG,IAAzB;AACA,MAAIC,kBAAkB,GAAG,IAAzB;AACA,MAAIC,kBAAkB,GAAG,IAAzB;AACA,MAAIC,mBAAmB,GAAG,IAA1B;AACA,MAAIC,aAAa,GAAG,IAApB;;AAEA,QAAMC,qBAAqB,GAAGC,KAAK,IAAI;AACnCC,IAAAA,YAAY,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAZ;AACH,GAFD;;AAIA,QAAMC,mBAAmB,GAAGJ,KAAK,IAAI;AACjCX,IAAAA,iBAAiB,CAACW,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAjB;AACH,GAFD;;AAIA,QAAME,oBAAoB,GAAGL,KAAK,IAAI;AAClCP,IAAAA,kBAAkB,CAACO,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAlB;AACH,GAFD;;AAIA,QAAMG,gBAAgB,GAAGN,KAAK,IAAI;AAC9BO,IAAAA,mBAAmB,CAAEP,KAAK,CAACE,MAAN,CAAaC,KAAf,CAAnB;AACH,GAFD;;AAIA,QAAMK,cAAc,GAAGR,KAAK,IAAI;AAC5BS,IAAAA,iBAAiB,CAACT,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAjB;AACH,GAFD;;AAIA,QAAMO,iBAAiB,GAAIC,OAAD,IAAa;AACnC/B,IAAAA,KAAK,CAACgC,OAAN,CAAcC,IAAd,CAAmB,YAAYF,OAA/B;AACH,GAFD;;AAIA,WAASG,cAAT,GAAyB;AACrB;AACAC,IAAAA,KAAK,CAACnC,KAAK,CAACoC,OAAN,GAAgB,yBAAjB,EAA4C;AAC7CC,MAAAA,MAAM,EAAE,KADqC;AAE7CC,MAAAA,OAAO,EAAE;AACL,yBAAkB,UADb;AAEL,kBAAU;AAFL,OAFoC;AAM7CC,MAAAA,IAAI,EAAEzB;AANuC,KAA5C,CAAL,CAOG0B,IAPH,CAOSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPtB,EAQGF,IARH,CAQSC,QAAD,IAAc;AAACtC,MAAAA,qBAAqB,CAACsC,QAAQ,CAACvC,MAAV,CAArB;AACtB,KATD,EAFqB,CAarB;;AACAiC,IAAAA,KAAK,CAACnC,KAAK,CAACoC,OAAN,GAAgB,wBAAjB,EAA2C;AAC5CC,MAAAA,MAAM,EAAE,KADoC;AAE5CC,MAAAA,OAAO,EAAE;AACL,yBAAkB,UADb;AAEL,kBAAU;AAFL,OAFmC;AAM5CC,MAAAA,IAAI,EAAExB;AANsC,KAA3C,CAAL,CAQCyB,IARD,CAQOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARpB,EASCF,IATD,CASOC,QAAD,IAAc;AAACpC,MAAAA,qBAAqB,CAACoC,QAAQ,CAACvC,MAAV,CAArB;AACpB,KAVD;AAWH;;AAED,WAASyC,UAAT,GAAqB;AACjBR,IAAAA,KAAK,CAACnC,KAAK,CAACoC,OAAN,GAAgB,QAAjB,EAA2B;AAC5BC,MAAAA,MAAM,EAAE,KADoB;AAE5BC,MAAAA,OAAO,EAAE;AACL,yBAAkB,UADb;AAEL,kBAAU;AAFL,OAFmB;AAM5BC,MAAAA,IAAI,EAAEvB;AANsB,KAA3B,CAAL,CAQCwB,IARD,CAQOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARpB,EASCF,IATD,CASOC,QAAD,IAAc;AAChBlC,MAAAA,iBAAiB,CAACkC,QAAQ,CAACG,MAAV,CAAjB;AACH,KAXD;AAYH;;AAED,WAASC,WAAT,GAAsB;AAElBV,IAAAA,KAAK,CAACnC,KAAK,CAACoC,OAAN,GAAgB,SAAjB,EAA4B;AAC7BC,MAAAA,MAAM,EAAE,KADqB;AAE7BC,MAAAA,OAAO,EAAE;AACL,yBAAkB,UADb;AAEL,kBAAU;AAFL,OAFoB;AAM7BC,MAAAA,IAAI,EAAEtB;AANuB,KAA5B,CAAL,CAQCuB,IARD,CAQOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EARpB,EASCF,IATD,CASOC,QAAD,IAAc;AAChB9B,MAAAA,kBAAkB,CAAC8B,QAAQ,CAACK,OAAV,CAAlB;AACH,KAXD;AAaH;;AAED1F,EAAAA,eAAe,CAAC,MAAM;AAClB8E,IAAAA,cAAc;AACdS,IAAAA,UAAU;AACVE,IAAAA,WAAW,GAHO,CAIlB;AACH,GALc,EAKb,EALa,CAAf;;AAOA,WAASE,WAAT,CAAqBC,KAArB,EAA2B;AACvBb,IAAAA,KAAK,CAACnC,KAAK,CAACoC,OAAN,GAAe,QAAf,GAA0Ba,SAAS,CAACD,KAAD,CAApC,EAA4C;AAC7CX,MAAAA,MAAM,EAAE,KADqC;AAE7CC,MAAAA,OAAO,EAAE;AACL,yBAAiB;AADZ,OAFoC;AAK7CC,MAAAA,IAAI,EAAErB;AALuC,KAA5C,CAAL,CAOCsB,IAPD,CAOOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPpB,EAQCF,IARD,CAQOC,QAAD,IAAc;AAChBpC,MAAAA,qBAAqB,CAACoC,QAAQ,CAACvC,MAAV,CAArB;AAAuC,KAT3C;AAUH;;AAED,QAAMgD,wBAAwB,GAAG,MAAM;AACnC,QAAIF,KAAK,GAAG,kBAAZ;;AACA,QAAIG,SAAS,KAAK,EAAlB,EAAsB;AAClBH,MAAAA,KAAK,IAAI,YAAYG,SAArB;AACH;;AACD,QAAI3C,cAAc,CAAC4C,MAAf,GAAwB,CAA5B,EAA+B;AAC3BJ,MAAAA,KAAK,IAAI,aAAaxC,cAAc,CAAC6C,QAAf,EAAtB;AACH;;AACD,QAAIzC,eAAe,CAACwC,MAAhB,GAAyB,CAA7B,EAAgC;AAC5BJ,MAAAA,KAAK,IAAI,cAAcpC,eAAe,CAACyC,QAAhB,EAAvB;AACH;;AACD,QAAIC,YAAY,KAAK,EAArB,EAAyB;AACrBN,MAAAA,KAAK,IAAI,iBAAiBM,YAA1B;AACH;;AACD,QAAIC,UAAU,KAAK,EAAnB,EAAuB;AACnBP,MAAAA,KAAK,IAAI,eAAeO,UAAxB;AACH;;AACDR,IAAAA,WAAW,CAACC,KAAD,CAAX;AACC,GAlBL;;AAoBA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI,QAAC,QAAD;AAAU,MAAA,SAAS,EAAE/C,OAAO,CAACnB,aAA7B;AAA4C,MAAA,IAAI,EAAE,CAAlD;AAAqD,MAAA,UAAU,EAAE,GAAjE;AAAA,gBACKoB,MAAM,CAACsD,GAAP,CAAYC,GAAD,iBACZ,QAAC,YAAD;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEA,GAAG,CAACC,UAAd;AAA0B,UAAA,GAAG,EAAED,GAAG,CAACvE,KAAnC;AAA0C,UAAA,SAAS,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,eAAD;AAAiB,UAAA,KAAK,EAAEuE,GAAG,CAACvE;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAmBuE,GAAG,CAACE,EAAvB;AAAA;AAAA;AAAA;AAAA,cADC;AADL;AAAA;AAAA;AAAA;AAAA,YALJ,eAeI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACI,QAAC,QAAD;AAAU,UAAA,UAAU,EAAE,GAAtB;AAA2B,UAAA,IAAI,EAAE,CAAjC;AAAoC,UAAA,SAAS,EAAE1D,OAAO,CAACV,qBAAvD;AAAA,oBACKa,SAAS,CAACoD,GAAV,CAAcC,GAAG,iBACd,QAAC,YAAD;AAAA,oCACI;AAAK,cAAA,GAAG,EAAEA,GAAG,CAACC,UAAd;AAA0B,cAAA,SAAS,EAAC,YAApC;AAAiD,cAAA,GAAG,EAAED,GAAG,CAACvE;AAA1D;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,eAAD;AACI,cAAA,KAAK,EAAEuE,GAAG,CAACvE,KADf;AAEI,cAAA,QAAQ,eAAE;AAAA,6CAAqB,IAAI0E,IAAJ,CAASH,GAAG,CAACI,YAAb,EAA2BC,YAA3B,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAFd;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA,aAAmBL,GAAG,CAACE,EAAvB;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAgBI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACI,QAAC,IAAD;AAAA,iCACI,QAAC,WAAD;AAAA,oCACI,QAAC,WAAD;AAAa,cAAA,SAAS,EAAE1D,OAAO,CAACR,mBAAhC;AAAA,qCACI,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAEQ,OAAO,CAACf,KAA/B;AAAsC,gBAAA,KAAK,EAAC,eAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADJ,eAOI,QAAC,WAAD;AAAa,cAAA,SAAS,EAAEe,OAAO,CAACR,mBAAhC;AAAA,sCACI,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,KAAD;AAAO,gBAAA,EAAE,EAAC,WAAV;AAAsB,gBAAA,QAAQ,EAAE0B;AAAhC;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ,eAYI,QAAC,WAAD;AAAa,cAAA,SAAS,EAAElB,OAAO,CAACR,mBAAhC;AAAA,sCACI,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,MAAD;AACI,gBAAA,QAAQ,MADZ;AAEI,gBAAA,KAAK,eAAE,QAAC,KAAD;AAAO,kBAAA,EAAE,EAAC;AAAV;AAAA;AAAA;AAAA;AAAA,wBAFX;AAGI,gBAAA,WAAW,EAAEsE,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAc,GAAd,CAH7B;AAGiD,gBAAA,KAAK,EAAExD,cAHxD;AAGwE,gBAAA,QAAQ,EAAEgB,mBAHlF;AAAA,0BAKKlB,cAAc,CAACkD,GAAf,CAAmBS,KAAK,iBACrB,QAAC,QAAD;AAAyB,kBAAA,KAAK,EAAEA,KAAK,CAACA,KAAtC;AAAA,0CACI,QAAC,QAAD;AAAU,oBAAA,OAAO,EAAEzD,cAAc,CAAC0D,OAAf,CAAuBD,KAAK,CAACA,KAA7B,IAAsC,CAAC;AAA1D;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI,QAAC,YAAD;AAAc,oBAAA,OAAO,EAAEA,KAAK,CAACA;AAA7B;AAAA;AAAA;AAAA;AAAA,0BAFJ;AAAA,mBAAeA,KAAK,CAACN,EAArB;AAAA;AAAA;AAAA;AAAA,wBADH;AALL;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAZJ,eA4BI,QAAC,WAAD;AAAa,cAAA,SAAS,EAAE1D,OAAO,CAACR,mBAAhC;AAAA,sCACI,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,MAAD;AAAQ,gBAAA,QAAQ,MAAhB;AAAiB,gBAAA,KAAK,eAAE,QAAC,KAAD;AAAO,kBAAA,EAAE,EAAC;AAAV;AAAA;AAAA;AAAA;AAAA,wBAAxB;AACI,gBAAA,WAAW,EAAEsE,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAc,GAAd,CAD7B;AAEI,gBAAA,KAAK,EAAEpD,eAFX;AAE4B,gBAAA,QAAQ,EAAEa,oBAFtC;AAAA,0BAIKf,eAAe,CAAC8C,GAAhB,CAAoBW,MAAM,iBACvB,QAAC,QAAD;AAA0B,kBAAA,KAAK,EAAEA,MAAM,CAACC,UAAP,GAAoB,GAApB,GAA0BD,MAAM,CAACE,SAAlE;AAAA,0CACI,QAAC,QAAD;AAAU,oBAAA,OAAO,EAAEzD,eAAe,CAACsD,OAAhB,CAAwBC,MAAM,CAACC,UAAP,GAAoB,GAApB,GAA0BD,MAAM,CAACE,SAAzD,IAAsE,CAAC;AAA1F;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI,QAAC,YAAD;AAAc,oBAAA,OAAO,EAAEF,MAAM,CAACC,UAAP,GAAoB,GAApB,GAA0BD,MAAM,CAACE;AAAxD;AAAA;AAAA;AAAA;AAAA,0BAFJ;AAAA,mBAAeF,MAAM,CAACR,EAAtB;AAAA;AAAA;AAAA;AAAA,wBADH;AAJL;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBA5BJ,eA2CI,QAAC,WAAD;AAAa,cAAA,SAAS,EAAE1D,OAAO,CAACR,mBAAhC;AAAA,qCACI,QAAC,SAAD;AAAW,gBAAA,EAAE,EAAC,cAAd;AAA6B,gBAAA,KAAK,EAAC,oBAAnC;AAAwD,gBAAA,IAAI,EAAC,MAA7D;AAAoE,gBAAA,YAAY,EAAC,EAAjF;AACI,gBAAA,eAAe,EAAE;AAAE6E,kBAAAA,MAAM,EAAE;AAAV,iBADrB;AACuC,gBAAA,QAAQ,EAAE5C;AADjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBA3CJ,eAgDI,QAAC,WAAD;AAAa,cAAA,SAAS,EAAEzB,OAAO,CAACR,mBAAhC;AAAA,qCACI,QAAC,SAAD;AAAW,gBAAA,EAAE,EAAC,YAAd;AAA2B,gBAAA,KAAK,EAAC,kBAAjC;AAAmD,gBAAA,IAAI,EAAC,MAAxD;AAA+D,gBAAA,YAAY,EAAC,EAA5E;AACI,gBAAA,eAAe,EAAE;AAAE6E,kBAAAA,MAAM,EAAE;AAAV,iBADrB;AACuC,gBAAA,QAAQ,EAAE1C;AADjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAhDJ,eAoDI;AAAA;AAAA;AAAA;AAAA,oBApDJ,eAqDI;AAAA;AAAA;AAAA;AAAA,oBArDJ,eAsDI,QAAC,WAAD;AAAa,cAAA,SAAS,EAAE3B,OAAO,CAACR,mBAAhC;AAAA,qCACI,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAE,MAAKyD,wBAAwB,EAA9C;AAAkD,gBAAA,OAAO,EAAC,WAA1D;AAAsE,gBAAA,KAAK,EAAC,SAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAtDJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqGH,CA/OD;;GAAMnD,I;;KAAAA,I;AAiPN,eAAerC,UAAU,CAACa,SAAD,CAAV,CAAsBwB,IAAtB,CAAf","sourcesContent":["import React, { useLayoutEffect, useState } from \"react\";\nimport Header from \"../../common/header/Header\"\nimport \"./Home.css\"\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\n\nconst useStyles = theme => ({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridListUpMov: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)',\n      width:'100%'\n    },\n    title: {\n      color: theme.palette.primary.light,\n    },\n    titleBar: {\n      background:\n        'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n    gridListLeftContainer: {\n        transform: 'translateZ(0)',\n        cursor: 'pointer'\n    },\n    movieFilterCardForm: {\n        margin: theme.spacing.unit,\n        minWidth: 240,\n        maxWidth: 240\n    },\n  });\n  \nconst Home = (props) => {\n    const {classes} = props;\n    const [movies,setUpcomingMoviesList] = useState([]);\n    const [relMovies, setReleasedMoviesList] = useState([]);\n    const [genresPicklist, setGenresPicklist] = useState([]);\n    const [selectedGenres, setSelectedGenres] = useState([]);\n    const [artistsPicklist, setArtistsPicklist] = useState([]);\n    const [selectedArtists, setSelectedArtists] = useState([]);\n    \n    let dataUpcomingMovies = null;\n    let dataReleasedMovies = null;\n    let dataGenresPicklist = null;\n    let dataArtistsPicklist = null;\n    let dataFilterBox = null;\n\n    const inputMovieNameHandler = event => {\n        setMovieName(event.target.value);\n    }\n    \n    const selectGenresHandler = event => {\n        setSelectedGenres(event.target.value);\n    }\n    \n    const selectArtistsHandler = event => {\n        setSelectedArtists(event.target.value);\n    }\n    \n    const startDateHandler = event => {\n        setReleaseDateStart( event.target.value);\n    }\n    \n    const endDateHandler = event => {\n        setReleaseDateEnd(event.target.value);\n    }\n    \n    const movieClickHandler = (movieId) => {\n        props.history.push('/movie/' + movieId);\n    }\n    \n    function loadMoviesData(){\n        //upcoming movies get request \n        fetch(props.baseURL + \"movies?status=PUBLISHED\", {\n            method: \"GET\" ,\n            headers: {\n                \"Cache-Control\" : \"no-cache\",\n                'Accept': 'application/json'\n            },\n            body: dataUpcomingMovies,\n        }).then((response) => response.json())\n          .then((response) => {setUpcomingMoviesList(response.movies);\n        });\n       \n        //released movies get request\n        fetch(props.baseURL + \"movies?status=RELEASED\", {\n            method: \"GET\" ,\n            headers: {\n                \"Cache-Control\" : \"no-cache\",\n                'Accept': 'application/json'\n            },\n            body: dataReleasedMovies,\n        })\n        .then((response) => response.json())\n        .then((response) => {setReleasedMoviesList(response.movies);\n        });\n    }\n\n    function loadGenres(){\n        fetch(props.baseURL + \"genres\", {\n            method: \"GET\" ,\n            headers: {\n                'Cache-Control' : \"no-cache\",\n                'Accept': 'application/json'\n            },\n            body: dataGenresPicklist,\n        })\n        .then((response) => response.json())\n        .then((response) => {\n            setGenresPicklist(response.genres);\n        });\n    }\n\n    function loadArtists(){\n\n        fetch(props.baseURL + \"artists\", {\n            method: \"GET\" ,\n            headers: {\n                \"Cache-Control\" : \"no-cache\",\n                'Accept': 'application/json'\n            },\n            body: dataArtistsPicklist,\n        })\n        .then((response) => response.json())\n        .then((response) => {\n            setArtistsPicklist(response.artists);\n        });\n\n    }\n\n    useLayoutEffect(() => {\n        loadMoviesData();\n        loadGenres();\n        loadArtists();\n        //console.log(movies)\n    },[])\n\n    function loadFilters(query){\n        fetch(props.baseURL +\"movies\" + encodeURI(query),{\n            method: \"GET\",\n            headers: {\n                \"Cache-Control\": \"no-cache\"\n            },\n            body: dataFilterBox,\n        })\n        .then((response) => response.json())\n        .then((response) => {\n            setReleasedMoviesList(response.movies)});\n    }\n\n    const applyFilterButtonHandler = () => {\n        let query = \"?status=RELEASED\";\n        if (movieName !== \"\") {\n            query += \"&title=\" + movieName;\n        }\n        if (selectedGenres.length > 0) {\n            query += \"&genres=\" + selectedGenres.toString();\n        }\n        if (selectedArtists.length > 0) {\n            query += \"&artists=\" + selectedArtists.toString();\n        }\n        if (relStartDate !== \"\") {\n            query += \"&start_date=\" + relStartDate;\n        }\n        if (relEndDate !== \"\") {\n            query += \"&end_date=\" + relEndDate;\n        }\n        loadFilters(query);\n        }\n    \n    return(\n        <div>\n            <Header/>\n            <div className=\"upMovHeader\">Upcoming Movies</div>\n            \n            {/* upcoming movies grid list - material ui */}\n            <GridList className={classes.gridListUpMov} cols={6} cellHeight={250}>\n                {movies.map((mov) => (\n                <GridListTile key={mov.id}>\n                    <img src={mov.poster_url} alt={mov.title} className=\"mov-poster\"/>\n                    <GridListTileBar title={mov.title}/>\n                </GridListTile>\n                ))}\n            </GridList>\n           \n            {/* flex container with left and right divisions */}\n            <div className=\"flex-container\">\n\n                <div className=\"left-container\">\n                    <GridList cellHeight={350} cols={4} className={classes.gridListLeftContainer}>\n                        {relMovies.map(mov => (\n                            <GridListTile key={mov.id}>\n                                <img src={mov.poster_url} className=\"mov-poster\" alt={mov.title} />\n                                <GridListTileBar\n                                    title={mov.title}\n                                    subtitle={<span>Release Date: {new Date(mov.release_date).toDateString()}</span>}\n                                />\n                            </GridListTile>\n                        ))}\n                    </GridList>\n                </div>\n\n                <div className=\"right-container\">\n                    <Card>\n                        <CardContent>\n                            <FormControl className={classes.movieFilterCardForm}>\n                                <Typography className={classes.title} color=\"textSecondary\">\n                                    FIND MOVIES BY:\n                                </Typography>\n                            </FormControl>\n\n                            <FormControl className={classes.movieFilterCardForm}>\n                                <InputLabel htmlFor=\"movieName\">Movie Name</InputLabel>\n                                <Input id=\"movieName\" onChange={inputMovieNameHandler}/>\n                            </FormControl>\n\n                            <FormControl className={classes.movieFilterCardForm}>\n                                <InputLabel htmlFor=\"genres-Picklist\">Genres</InputLabel>\n                                <Select\n                                    multiple\n                                    input={<Input id=\"genres-Picklist\" />}\n                                    renderValue={selected => selected.join(\",\")} value={selectedGenres} onChange={selectGenresHandler}>\n                                    \n                                    {genresPicklist.map(genre => (\n                                        <MenuItem key={genre.id} value={genre.genre}>\n                                            <Checkbox checked={selectedGenres.indexOf(genre.genre) > -1} />\n                                            <ListItemText primary={genre.genre} />\n                                        </MenuItem>\n                                    ))}\n                                </Select> \n                            </FormControl>\n\n                            <FormControl className={classes.movieFilterCardForm}>\n                                <InputLabel htmlFor=\"selectArtists\">Artists</InputLabel>\n                                <Select multiple input={<Input id=\"selectArtists\" />}\n                                    renderValue={selected => selected.join(',')}\n                                    value={selectedArtists} onChange={selectArtistsHandler}>\n                                    \n                                    {artistsPicklist.map(artist => (\n                                        <MenuItem key={artist.id} value={artist.first_name + \" \" + artist.last_name}>\n                                            <Checkbox checked={selectedArtists.indexOf(artist.first_name + \" \" + artist.last_name) > -1} />\n                                            <ListItemText primary={artist.first_name + \" \" + artist.last_name} />\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n\n                            <FormControl className={classes.movieFilterCardForm}>\n                                <TextField id=\"relStartDate\" label=\"Release Date Start\" type=\"date\" defaultValue=\"\" \n                                    InputLabelProps={{ shrink: true }} onChange={startDateHandler}/>\n                            </FormControl>\n\n                            <FormControl className={classes.movieFilterCardForm}>\n                                <TextField id=\"relEndDate\" label=\"Release Date End\"type=\"date\" defaultValue=\"\"\n                                    InputLabelProps={{ shrink: true }} onChange={endDateHandler}/>\n                            </FormControl>\n                            <br/>\n                            <br/>\n                            <FormControl className={classes.movieFilterCardForm}>\n                                <Button onClick={() =>applyFilterButtonHandler()} variant=\"contained\" color=\"primary\">\n                                    APPLY\n                                </Button>\n                            </FormControl>\n                        </CardContent>\n                    </Card>\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default withStyles(useStyles)(Home);"]},"metadata":{},"sourceType":"module"}