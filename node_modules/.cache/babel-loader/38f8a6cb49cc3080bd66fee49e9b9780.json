{"ast":null,"code":"var _jsxFileName = \"/Users/samiksharana/Downloads/book-movie-app/src/screens/home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from \"react\";\nimport Header from \"../../common/header/Header\";\nimport \"./Home.css\";\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { withStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useStyles = theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper\n  },\n  gridList: {\n    flexWrap: 'nowrap',\n    transform: 'translateZ(0)'\n  },\n  title: {\n    color: theme.palette.primary.light\n  },\n  titleBar: {\n    background: 'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)'\n  }\n});\n\nconst Home = props => {\n  _s();\n\n  const classes = props;\n  const [movies, setUpcomingMoviesList] = useState([]);\n  let dataUpcoming = null;\n\n  function loadMoviesData() {\n    fetch(props.baseURL + \"movies?status=PUBLISHED\", {\n      method: \"GET\",\n      headers: {\n        \"Cache-Control\": \"no-cache\",\n        'Accept': 'application/json'\n      },\n      body: dataUpcoming\n    }).then(response => response.json()).then(response => {\n      setUpcomingMoviesList(response.movies);\n    });\n  }\n\n  useLayoutEffect(() => {\n    loadMoviesData();\n    console.log(movies);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upMovHeader\",\n      children: \"Upcoming Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(GridList, {\n        className: classes.gridList,\n        cols: 6,\n        cellHeight: 250,\n        children: movies.map(mov => /*#__PURE__*/_jsxDEV(GridListTile, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: mov.poster_url,\n            alt: mov.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n            title: mov.title,\n            classes: {\n              root: classes.titleBar,\n              title: classes.title\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, mov.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"vM0G6hU9B/ExgQu/fgg7O1n0Pxo=\");\n\n_c = Home;\nexport default withStyles(useStyles)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/samiksharana/Downloads/book-movie-app/src/screens/home/Home.js"],"names":["React","useLayoutEffect","useState","Header","GridList","GridListTile","GridListTileBar","withStyles","useStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","transform","title","color","primary","light","titleBar","Home","props","classes","movies","setUpcomingMoviesList","dataUpcoming","loadMoviesData","fetch","baseURL","method","headers","body","then","response","json","console","log","map","mov","poster_url","id"],"mappings":"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","sourcesContent":["import React, { useLayoutEffect, useState } from \"react\";\nimport Header from \"../../common/header/Header\"\nimport \"./Home.css\"\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst useStyles = theme => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)',\n    },\n    title: {\n      color: theme.palette.primary.light,\n    },\n    titleBar: {\n      background:\n        'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n  });\n  \nconst Home = (props) => {\n    const classes = props;\n    const [movies,setUpcomingMoviesList] = useState([]);\n    let dataUpcoming =null;\n    function loadMoviesData(){\n        fetch(props.baseURL + \"movies?status=PUBLISHED\", {\n            method: \"GET\" ,\n            headers: {\n                \"Cache-Control\" : \"no-cache\",\n                'Accept': 'application/json'\n            },\n            body: dataUpcoming,\n        }).then((response) => response.json())\n          .then((response) => {\n            setUpcomingMoviesList(response.movies);\n        });\n    }\n\n    useLayoutEffect(() => {\n        loadMoviesData();\n        console.log(movies)\n    },[])\n    \n    return(\n        <div>\n            <Header/>\n            <div className=\"upMovHeader\">Upcoming Movies</div>\n            <div className={classes.root}>\n                <GridList className={classes.gridList} cols={6} cellHeight={250}>\n                    {movies.map((mov) => (\n                    <GridListTile key={mov.id}>\n                        <img src={mov.poster_url} alt={mov.title} />\n                        <GridListTileBar\n                        title={mov.title}\n                        classes={{\n                            root: classes.titleBar,\n                            title: classes.title,\n                        }}\n                        />\n                    </GridListTile>\n                    ))}\n                </GridList>\n            </div>\n        </div>\n    )\n}\n\nexport default withStyles(useStyles)(Home);"]},"metadata":{},"sourceType":"module"}