{"ast":null,"code":"var _jsxFileName = \"/Users/samiksharana/Downloads/book-movie-app/src/screens/home/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useState } from \"react\";\nimport Header from \"../../common/header/Header\";\nimport \"./Home.css\";\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { withStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useStyles = theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper\n  },\n  gridListUpMov: {\n    flexWrap: 'nowrap',\n    transform: 'translateZ(0)',\n    width: '100%'\n  },\n  title: {\n    color: theme.palette.primary.light\n  },\n  titleBar: {\n    background: 'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)'\n  },\n  gridListMain: {\n    transform: 'translateZ(0)',\n    cursor: 'pointer'\n  }\n});\n\nconst Home = props => {\n  _s();\n\n  const {\n    classes\n  } = props;\n  const [movies, setUpcomingMoviesList] = useState([]);\n  const [relMovies, setReleasedMoviesList] = useState([]);\n  let dataUpcomingMovies = null;\n  let dataReleasedMovies = null;\n\n  function loadMoviesData() {\n    //upcoming movies get request \n    fetch(props.baseURL + \"movies?status=PUBLISHED\", {\n      method: \"GET\",\n      headers: {\n        \"Cache-Control\": \"no-cache\",\n        'Accept': 'application/json'\n      },\n      body: dataUpcomingMovies\n    }).then(response => response.json()).then(response => {\n      setUpcomingMoviesList(response.movies);\n    }); //released movies get request\n\n    fetch(props.baseURL + \"movies?status=RELEASED\", {\n      method: \"GET\",\n      headers: {\n        \"Cache-Control\": \"no-cache\",\n        'Accept': 'application/json'\n      },\n      body: dataReleasedMovies\n    }).then(response => response.json()).then(response => {\n      setReleasedMoviesList(response.movies);\n    });\n  }\n\n  useLayoutEffect(() => {\n    loadMoviesData();\n    console.log(movies);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upMovHeader\",\n      children: \"Upcoming Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GridList, {\n      className: classes.gridListUpMov,\n      cols: 6,\n      cellHeight: 250,\n      children: movies.map(mov => /*#__PURE__*/_jsxDEV(GridListTile, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: mov.poster_url,\n          alt: mov.title,\n          className: \"mov-poster\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n          title: mov.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, mov.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-container\",\n        children: /*#__PURE__*/_jsxDEV(GridList, {\n          cellHeight: 350,\n          cols: 4,\n          className: classes.gridListMain,\n          children: relMovies.map(mov => /*#__PURE__*/_jsxDEV(GridListTile, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: mov.poster_url,\n              className: \"movie-poster\",\n              alt: mov.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n              title: mov.title,\n              subtitle: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Release Date: \", new Date(mov.release_date).toDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 33\n            }, this)]\n          }, \"grid\" + mov.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"xYC2XUsBdrdp4Bx7JokSlAlIccU=\");\n\n_c = Home;\nexport default withStyles(useStyles)(Home);\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/samiksharana/Downloads/book-movie-app/src/screens/home/Home.js"],"names":["React","useLayoutEffect","useState","Header","GridList","GridListTile","GridListTileBar","withStyles","useStyles","theme","root","backgroundColor","palette","background","paper","gridListUpMov","flexWrap","transform","width","title","color","primary","light","titleBar","gridListMain","cursor","Home","props","classes","movies","setUpcomingMoviesList","relMovies","setReleasedMoviesList","dataUpcomingMovies","dataReleasedMovies","loadMoviesData","fetch","baseURL","method","headers","body","then","response","json","console","log","map","mov","poster_url","id","Date","release_date","toDateString"],"mappings":"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","sourcesContent":["import React, { useLayoutEffect, useState } from \"react\";\nimport Header from \"../../common/header/Header\"\nimport \"./Home.css\"\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst useStyles = theme => ({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridListUpMov: {\n      flexWrap: 'nowrap',\n      transform: 'translateZ(0)',\n      width:'100%'\n    },\n    title: {\n      color: theme.palette.primary.light,\n    },\n    titleBar: {\n      background:\n        'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n    gridListMain: {\n        transform: 'translateZ(0)',\n        cursor: 'pointer'\n    },\n  });\n  \nconst Home = (props) => {\n    const {classes} = props;\n    const [movies,setUpcomingMoviesList] = useState([]);\n    const [relMovies, setReleasedMoviesList] = useState([]);\n    let dataUpcomingMovies = null;\n    let dataReleasedMovies = null;\n    function loadMoviesData(){\n        //upcoming movies get request \n        fetch(props.baseURL + \"movies?status=PUBLISHED\", {\n            method: \"GET\" ,\n            headers: {\n                \"Cache-Control\" : \"no-cache\",\n                'Accept': 'application/json'\n            },\n            body: dataUpcomingMovies,\n        }).then((response) => response.json())\n          .then((response) => {setUpcomingMoviesList(response.movies);\n        });\n       \n        //released movies get request\n        fetch(props.baseURL + \"movies?status=RELEASED\", {\n            method: \"GET\" ,\n            headers: {\n                \"Cache-Control\" : \"no-cache\",\n                'Accept': 'application/json'\n            },\n            body: dataReleasedMovies,\n        })\n        .then((response) => response.json())\n        .then((response) => {setReleasedMoviesList(response.movies);\n        });\n    }\n\n    useLayoutEffect(() => {\n        loadMoviesData();\n        console.log(movies)\n    },[])\n    \n    return(\n        <div>\n            <Header/>\n            <div className=\"upMovHeader\">Upcoming Movies</div>\n            \n            {/* upcoming movies grid list - material ui */}\n            <GridList className={classes.gridListUpMov} cols={6} cellHeight={250}>\n                {movies.map((mov) => (\n                <GridListTile key={mov.id}>\n                    <img src={mov.poster_url} alt={mov.title} className=\"mov-poster\"/>\n                    <GridListTileBar title={mov.title}/>\n                </GridListTile>\n                ))}\n            </GridList>\n           \n            {/* flex container with left and right divisions */}\n            <div className=\"flex-container\">\n\n                <div className=\"left-container\">\n                    <GridList cellHeight={350} cols={4} className={classes.gridListMain}>\n                        {relMovies.map(mov => (\n                            <GridListTile key={\"grid\" + mov.id}>\n                                <img src={mov.poster_url} className=\"movie-poster\" alt={mov.title} />\n                                <GridListTileBar\n                                    title={mov.title}\n                                    subtitle={<span>Release Date: {new Date(mov.release_date).toDateString()}</span>}\n                                />\n                            </GridListTile>\n                        ))}\n                    </GridList>\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default withStyles(useStyles)(Home);"]},"metadata":{},"sourceType":"module"}